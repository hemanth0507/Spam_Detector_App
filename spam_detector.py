# -*- coding: utf-8 -*-
"""Spam_Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Dm3pdWJTNMVwymE112yzmSM2-vXTWD8
"""

!pip install gTTS

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
import gradio as gr
from gtts import gTTS
import tempfile

df = pd.read_csv("spam.csv", encoding="latin-1")[["v1", "v2"]]
df.columns = ["label", "text"]
df["label"] = df["label"].map({"ham": 0, "spam": 1})

X_train, X_test, y_train, y_test = train_test_split(
    df["text"], df["label"], test_size=0.2, stratify=df["label"], random_state=42
)

model = Pipeline([
    ("tfidf", TfidfVectorizer(ngram_range=(1, 2), stop_words="english")),
    ("clf", LogisticRegression(max_iter=1000))
])
model.fit(X_train, y_train)

spam_keywords = {"kill", "prize", "won", "lottery", "congratulations", "urgent", "free", "click", "money"}

language_map = {
    "English": "en",
    "Tamil": "ta",
    "Telugu": "te",
    "Hindi": "hi",
    "Kannada": "kn",
    "Malayalam": "ml",
    "Marathi" : "mr"
}

def predict_message(text, language="English"):
    text_lower = text.lower()
    lang_code = language_map.get(language, "en")

    spam_msg = {
        "English": "Kindly delete the message",
        "Tamil": "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø‡ÆØ‡Øà ‡Æ®‡ØÄ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "Telugu": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "Hindi": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç",
        "Kannada": "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤≥‡≤ø‡≤∏‡≤ø",
        "Malayalam": "‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï",
        "Marathi":"‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡§ü‡§µ‡§æ"
    }
    ham_msg = {
        "English": "Good to have",
        "Tamil": "‡Æá‡Æ§‡ØÅ ‡Æµ‡Øà‡Æ§‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ ‡Æ®‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ",
        "Telugu": "‡∞á‡∞¶‡∞ø ‡∞â‡∞Ç‡∞°‡∞°‡∞Ç ‡∞Æ‡∞Ç‡∞ö‡∞ø‡∞¶‡∞ø",
        "Hindi": "‡§∞‡§ñ‡§®‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à",
        "Kannada": "‡≤á‡≤¶‡≤®‡≥ç‡≤®‡≥Å ‡≤á‡≤ü‡≥ç‡≤ü‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å ‡≤â‡≤§‡≥ç‡≤§‡≤Æ",
        "Malayalam": "‡¥á‡¥§‡µç ‡¥®‡¥≤‡µç‡¥≤‡¥§‡¥æ‡¥£‡µç",
        "Marathi":"‡§Ö‡§∏‡§£‡•á ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•á"
    }

    if any(keyword in text_lower for keyword in spam_keywords):
        label = "üö´ SPAM (Detected via keyword)"
        voice_response = spam_msg[language]
    else:
        pred = model.predict([text])[0]
        prob = model.predict_proba([text])[0][pred]
        if pred == 1:
            label = f"üö´ SPAM (Confidence: {prob:.2%})"
            voice_response = spam_msg[language]
        else:
            label = f"üì© HAM (Confidence: {prob:.2%})"
            voice_response = ham_msg[language]

    tts = gTTS(text=voice_response, lang=lang_code, slow=False, tld="co.in")
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
        tts.save(fp.name)
        return label, fp.name

# Dark-mode UI
custom_css = """
body, .gradio-container {
    background-color: #111 !important;
    color: #f0f0f0 !important;
}
input, textarea, .gr-button, .gr-box, label, select {
    background-color: #222 !important;
    color: #f0f0f0 !important;
    border: 1px solid #333 !important;
}
.gr-button:hover {
    background-color: #333 !important;
}
"""

with gr.Blocks(css=custom_css, title="Spam Detector") as app:
    gr.HTML("""
    <div style='
        background: linear-gradient(to right, #1e3c72, #2a5298);
        color: white;
        padding: 30px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
        font-family: sans-serif;
    '>
        <h1 style='font-size: 3em;'>üì® Spam Classifier App</h1>
        <p style='font-size: 1.2em;'>An intelligent Spam/Ham detector with multilingual voice support!</p>
    </div>
    """)

    gr.Markdown("### üîç Check if a Message is Spam or Ham")

    with gr.Row():
        with gr.Column(scale=1):
            msg_input = gr.Textbox(label="‚úâÔ∏è Your Message", lines=5, placeholder="Type message here...")

            with gr.Group():
                gr.Markdown("#### üéß Voice Feedback Language")
                language = gr.Dropdown(
                    ["English", "Tamil", "Telugu", "Hindi", "Kannada", "Malayalam","Marathi"],
                    label="üåê Language", value="English"
                )

            classify_btn = gr.Button("üß† Classify Message", variant="primary")

        with gr.Column(scale=1):
            result_box = gr.Textbox(label="üì¢ Prediction", interactive=False)
            audio_box = gr.Audio(label="üéß Voice Feedback", type="filepath")

    classify_btn.click(predict_message, inputs=[msg_input, language], outputs=[result_box, audio_box])

    gr.Markdown("""
    <hr>
    <div style='text-align:center; font-size:14px; color: #bbb;'>
        üéì Developed by <strong>Hemanth</strong> | Powered by Scikit-learn, gTTS & Gradio ü§ñ
    </div>
    """)

if __name__ == "__main__":
    app.launch()